-----------------------------------------------------------------------------------
CREATIVE LAB: (Optionally do this as an assignment)
-----------------------------------------------------------------------------------
1. Re-do prime numbers assignment with OJET components
2. Re-do currency converter using OJET components
   Additionally add more currency options, get ideas from google converter
3. Implement the calculator using OJET components

-----------------------------------------------------------------------------------
LAB 8: Working with Core Router and Developing SPA  
-----------------------------------------------------------------------------------
Objective:

1. Understanding the user of Core Router
2. The concept of Single Page Applications
3. Application bring up from blank template


-----------------------------------------------------------------------------------
LAB 9: Working with oj-table component
-----------------------------------------------------------------------------------
Objective:
To study the features of oj-table component


Part 1: Implementation
-----------------------------------------------------------------------------------

View:
Access https://docs.oracle.com/en/middleware/developer-tools/jet/7.2/develop/whats-new-this-guide-release-7.2.0.html
copy the <oj-table></oj-table>

ViewModel:

Required Modules:
"knockout", "ojs/ojarraydataprovider", "ojs/ojtable"

1. Use tabledata.txt to create the array required for the table: say deptArray
2. Wrap the data in ArrayDataProvider and feed it to oj-table
   self.dataProvider = new ArrayDataProvider(self.deptArray, {keyAttributes: 'DepartmentId'});

Part 2: Making the table sortable
-----------------------------------------------------------------------------------

View:
Use "sortable": "enabled" in DepartmentName column

Part 3: Adding Pagination
-----------------------------------------------------------------------------------

View:

Add at the bottom of the table:
    <oj-paging-control id="paging" data='[[]]' page-size='5' slot='bottom'>
    </oj-paging-control>

ViewModel:

Required Modules:
"ojs/ojpagingcontrol", "ojs/ojpagingdataproviderview"

Wrap the ArrayDataProvider with PagingDataProviderView and feed it to data attribute 
of the paging controller and the table as well
    self.pagingDataProvider =  new PagingDataProviderView(new ArrayDataProvider(self.deptArray, {keyAttributes: 'DepartmentId'}));


Update the view with pagingDataProvider for data attribute in oj-table and oj-paging-control

Part 4: Implementing Drag and Drop
-----------------------------------------------------------------------------------

View:

1. Create another table in the same view, call them master and slave
2. Call the data input dataProvider2
3. Add the following properties to master table:
                selection-mode='{"row": "multiple", "column": "multiple"}'
                dnd.drag.rows.data-types='["application/ojtablerows+json"]'
4. Add the following properties to slave table:
                selection-mode='{"row": "multiple", "column": "multiple"}'
                dnd.drop.rows.data-types='["application/ojtablerows+json"]'
                dnd.drop.rows.drop='[[handleDropRows]]'

ViewModel:

1. Create a small dataArray similar to Master table data array and feed it to slave table
   Remember to make it ko.observableArray()

2. Implement the handleDropRows function:
   This function should basically trasfer the dragged data into dataArray for slave table

    self.handleDropRows = (event, context) => {
        const dragData = event.dataTransfer.getData("application/ojtablerows+json");
        if (dragData) {
            const dragDataArray = JSON.parse(dragData);
            console.log(dragDataArray);
            for (let i = 0; i < dragDataArray.length; i++) {
                console.log(dragDataArray[i].data);
                self.dataArray.push(dragDataArray[i].data);
                //Alternatively splice() can be used as well
            }
        }
        console.log(self.dataArray);
      };

Part 5: Implementing the filtering functionality
-----------------------------------------------------------------------------------
      view: incidents.html
      
      1. Copy the table as in part 1
      2. Create a input component, this will become the filtering string input for the table
      
          <oj-input-text id="filter" class="oj-form-control-max-width-md" label-hint="Filter" label-edge="inside"
                         placeholder="Type to filter" on-raw-value-changed="[[handleValueChanged]]" value="{{filter}}" clear-icon="always">
          </oj-input-text>
      
      ViewModel: dashboard.js
      
      Modules needed:
      "knockout", "ojs/ojarraydataprovider",  
      "ojs/ojlistdataproviderview", "ojs/ojknockout","ojs/ojtable","ojs/ojinputtext"
      
      1. Create a observable for the filtering input
         this.filter = ko.observable();
      2. Copy data from tabledata.txt to create baseArray
      3. Write a replicator function to generate larger array, this step is to just 
         create a "seemingly" large data for the table. 
      
               this.generateDeptArray = (num) => {
                const deptArray = [];
                let count = 0;
                for (let i = 0; i < num; i++) {
                    for (let j = 0; j < this.baseDeptArray.length; j++) {
                        deptArray[count] = Object.assign({}, this.baseDeptArray[j]);
                        deptArray[count].DepartmentId += count.toString();
                        deptArray[count].DepartmentName += count.toString();
                        count++;
                    }
                }
                return deptArray;
            };
            this.deptArray = this.generateDeptArray(2);
      4. Capture the raw value from the filter input by implementing the handleValueChanged
         callback function in oj-input-text
      
          this.handleValueChanged = () => { 
              this.filter(document.getElementById("filter").rawValue);
              console.log("Filter value changed: ", this.filter());
            };
      5. Make the dataprovider for the table a computed function, 
         based on the input received on the filter input text box. Most importantly
         wrap it into ListDataProviderView
      
         const filterRegEx = new RegExp(this.filter(), "i");
                const filterCriterions = {
                    op: "$or",
                    criteria: [
                        { op: "$regex", value: { DepartmentId: filterRegEx } },
                        { op: "$regex", value: { DepartmentName: filterRegEx } },
                        { op: "$regex", value: { LocationId: filterRegEx } },
                        { op: "$regex", value: { ManagerId: filterRegEx } },
                    ],
                };
                const arrayDataProvider = new ArrayDataProvider(this.deptArray, { keyAttributes: "DepartmentId" });
                return new ListDataProviderView(arrayDataProvider, { filterCriterion: filterCriterions });
      
      RESULT: This should create the filtering effect on the table data

Part 6: Editable table
-----------------------------------------------------------------------------------
      View: customers.html
      
      1. Add oj-table with template attributes 
      
              <oj-table id="table"
                        aria-label="Departments Table"
                        data='[[dataprovider]]'
                        class='oj-bg-body'
                        edit-mode='rowEdit'
                        edit-row='{{editRow}}'
                        on-oj-before-row-edit='[[beforeRowEditListener]]'
                        on-oj-before-row-edit-end='[[beforeRowEditEndListener]]'
                        columns-default.sortable='disabled'
                        columns='[{"field": "EmployeeId",
                                    "headerText": "Employee Id",
                                    "headerClassName": "oj-helper-text-align-end",
                                    "width": 100,
                                    "className": "oj-helper-text-align-end oj-read-only",
                                    "template": "empIdTemplate"},
                                    {"headerText": "Employee Name",
                                    "className": "oj-read-only",
                                    "width": 200,
                                    "template": "empNameTemplate"},
                                    {"field":"salary",
                                    "headerText": "Salary",
                                    "headerClassName": "oj-helper-text-align-end",
                                    "className": "oj-helper-text-align-end",
                                    "width": 200,
                                    "template": "salaryTemplate"},
                                    {"field":"bonus",
                                    "headerText": "Bonus",
                                    "headerClassName": "oj-helper-text-align-end",
                                    "className": "oj-helper-text-align-end",
                                    "width": 200,
                                    "template": "bonusTemplate"},
                                    {"headerText": "Total Compensation",
                                    "headerClassName": "oj-helper-text-align-end",
                                    "className": "oj-helper-text-align-end oj-read-only",
                                    "width": 200,
                                    "template": "totalTemplate"}
                                    ]'>
              </oj-table>
      
      2. Add template definitions for all the cells:
         Remember to write these in between <oj-table></oj-table>
         Reference with oj-table documentation to get an idea of what everything means
      
                <template slot="empIdTemplate" data-oj-as="cell">
                    <oj-bind-text value="[[numberConverter.format(cell.data)]]"></oj-bind-text>
                </template>
                
                <template slot="empNameTemplate" data-oj-as="cell">
                    <oj-bind-text value="[[cell.row.FirstName + ' ' + cell.row.LastName]]"></oj-bind-text>
                </template>
                
                <template slot="salaryTemplate" data-oj-as="cell">
                    <oj-bind-if test='[[cell.mode=="navigation"]]'>
                        <oj-bind-text value="[[numberConverter.format(cell.data)]]"></oj-bind-text>
                    </oj-bind-if>
                
                
                    <oj-bind-if test='[[cell.mode=="edit"]]'>
                        <oj-input-number value="{{rowData.salary}}" min=1000 max=1500000 step=0 on-value-changed="{{valueChange}}" class="editable"></oj-input-number>
                    </oj-bind-if>
                </template>
                
                <template slot="bonusTemplate" data-oj-as="cell">
                    <oj-bind-if test='[[cell.mode=="navigation"]]'>
                        <oj-bind-text value="[[numberConverter.format(cell.data)]]"></oj-bind-text>
                    </oj-bind-if>
                
                
                    <oj-bind-if test='[[cell.mode=="edit"]]'>
                        <oj-input-number value="{{rowData.bonus}}" min=1000 max=1500000 step=0 on-value-changed="{{valueChange}}" class="editable"></oj-input-number>
                    </oj-bind-if>
                </template>
                
                
                <template slot="totalTemplate" data-oj-as="cell">
                    <oj-bind-if test='[[cell.mode=="navigation"]]'>
                        <oj-bind-text value="[[numberConverter.format(cell.row.salary + cell.row.bonus)]]"></oj-bind-text>
                    </oj-bind-if>
                
                
                    <oj-bind-if test='[[cell.mode=="edit"]]'>
                        <oj-bind-text value="[[numberConverter.format(rowData.total())]]"></oj-bind-text>
                    </oj-bind-if>
                </template>
      
      ViewModel:
      
      Required modules:
      "accUtils","require", "exports", "ojs/ojbootstrap", "ojs/ojconverter-number", "ojs/ojarraydataprovider", 
      "knockout", "ojs/ojknockout", "ojs/ojinputtext", "ojs/ojtable"
      
      1. Create an array empArray to feed the table. Use data from tabledata.txt
          this.empObservableArray = ko.observableArray(this.empArray);
          this.dataprovider = new ArrayDataProvider(this.empObservableArray, {
              keyAttributes: "EmployeeId",
          });
      
      2. Define editRow as observable, numberConverter as an InternationalNumberConverter Object
          this.numberConverter = new ojconverter_number_1.IntlNumberConverter();
          this.editRow = ko.observable();
      
      3. Implement valueChange() to handle on-value-changed attribute
          this.valueChange = () => {
              this.rowData.total(this.rowData.salary + this.rowData.bonus);
          };
      
      4. Implement the listner functions
          this.beforeRowEditListener = (event) => {
              this.rowData = Object.assign({}, event.detail.rowContext.item.data);
              this.rowData.total = ko.observable(this.rowData.salary + this.rowData.bonus);
          };
      
          //ojBeforeRowEditEnd 
          this.beforeRowEditEndListener = (event) => {
              const detail = event.detail;
              if (!detail.cancelEdit) {
                  if (this.hasValidationErrorInRow(document.getElementById("table"))) {
                      event.preventDefault();
                  }
                  else {
                      const rowIndex = this.empObservableArray.indexOf(detail.rowContext.item.data);
                      this.empObservableArray.splice(rowIndex, 1, this.rowData);
                      document.getElementById("rowDataDump").value = JSON.stringify(this.rowData);
                  }
              }
          };
      
RESULT: This should give you an live editable table

-----------------------------------------------------------------------------------
LAB 10: Rest API experiments 
-----------------------------------------------------------------------------------
Objective:
To use ajax() for fetching data from a Rest API end point
TO experiment with the available data

URL: https://restcountries.eu/rest/v2/all

Analyse the fields/contents using the jQuery ajax call:
$.ajax({
            url: "https://restcountries.eu/rest/v2/all",
            type: "GET",
            crossDomain: true,
            dataType: "json" });

Print the following information from the data received from the URL
name, capital, population, region, subregion, timezones ---> India

-----------------------------------------------------------------------------------
LAB 11: Working with the Common Model
-----------------------------------------------------------------------------------
Objective:
To implement the common model to capture the data from the REST endpoint

URL: https://apex.oracle.com/pls/apex/oraclejet/lp/activities/


Step 1:
customers.html

<oj-table id="table" summary="Common Model" aria-label="Common Model Demo"
                                        data='[[datasource]]' 
                                        columns='[
                                        {"headerText": "Name", "field": "name"},
                                        {"headerText": "Description", "field": "short_desc"}
                                        ]'>
</oj-table>

Step 2:
customers.js

Required Modules:
        'knockout', 
        'ojs/ojcollectiondataprovider', 
        "ojs/ojmodel", 
        "ojs/ojtable"


      self.parseData = function(response) {
        return {name: response['name'],
            short_desc: response['short_desc']
        };
      };

      self.serviceURL = "https://apex.oracle.com/pls/apex/oraclejet/lp/activities/";
      self.Department = Model.Model.extend({
              urlRoot: self.serviceURL,
              parse: self.parseData,
              idAttribute: 'id'
          }); 
      
      self.DeptCol = ko.observable();
      self.datasource = ko.observable();
      self.myDept = new self.Department();

      // Create a base object "class" for the entire dataset
      self.DeptCollection = Model.Collection.extend({
              url: self.serviceURL + "?limit=50",
              model: self.myDept
          });

      // Create a specific instance for the departments.  This will be filled with instances of the
      // model "department" for each record when the data is retrieved from the data service
      self.DeptCol(new self.DeptCollection());

      
      self.datasource(new CollectionDataProvider(self.DeptCol()));

CREATIVE LAB:
-----------------------------------------------------------------------------------

Repeat Lab 10 with:
URL: https://restcountries.eu/rest/v2/all

1. Add pagination to the table
2. Name, Capital, Population, Time Zone

-----------------------------------------------------------------------------------
Lab 12: Creating a custom component (composite component)
-----------------------------------------------------------------------------------

Part #1:


Step #1: Create a composite Component

ojet create component name-badge

RESULT: Oracle JET tooling creates the demo-name-badge composite component in the 
src/js/jet-composites directory. The composite component name 
contains a hyphen and is lowercase, as required by the W3C naming conventions for 
custom components.

Step #2: 

In your file system, navigate to the /JET_Web_Application/src/js/viewModels 
directory and open the incidents.js file in an editor. Modify as below:

define(['ojs/ojcore', 'knockout', 'jquery',
 'jet-composites/name-badge/1.0.0/loader'],

 Notice the user of the loader.js module of the name-badge component

Step #3:

In incidents.html, copy the following:

<div class="oj-hybrid-padding">
  <h1>Incidents Content Area</h1>
  <div>
  <name-badge></name-badge>
  </div>
</div>

Step #4:

Serve the Application
ojet Serve

The browser displays the navdrawer starter template 
with the default message visible in the Incidents tab of your web application.


-----------------------------------------------------------------------------------

Part 2:

Step #1:

Edit the component.json

{
  "name": "demo-name-badge",
  "displayName": "demo-name-badge",
  "description": "Component for displaying a badge with a name and an image",
  "version": "1.0.0",
  "jetVersion": "^5.0.0",
  "properties": {
      "badgeName" : {
      "type" : "string"
    },
      "badgeImage" : {
      "type" : "string"
    }
  }
}

Step #2:

Define component view

<div class="badge-face">
  <oj-avatar src="[[$properties.badgeImage]]" size="lg"></oj-avatar>
  <h3><oj-bind-text value="[[$properties.badgeName]]"></oj-bind-text></h3>
</div>

Step #3:

Define component viewModel:

define(
    ['ojs/ojcore', 'knockout', 'jquery',
 'ojL10n!./resources/nls/demo-name-badge-strings', 'ojs/ojavatar'],

Step #4:

Define component CSS

    name-badge:not(.oj-complete){
    visibility: hidden;
    }
    demo-name-badge{
    display : block;
    width : 200px;
    height: 200px;
    margin : 10px;
    }
    name-badge .badge-face {
    height : 100%;
    width : 100%;
    background-color : #80C3C8;
    border-radius: 5px;
    text-align: center;
    padding-top: 30px;
    }

Step #5:

Test the component:

In incidents.html:

<h1>Test Composite</h1>
<div class="oj-hybrid-padding">
  <h1>Test Composite</h1>
  <div>
  <name-badge badge-name="Duke Mascot"
              badge-image="https://upload.wikimedia.org/wikipedia/commons/b/b1/ThumbsUp.svg">
  </name-badge>
  </div>
</div>

Your component should appear on the incidents.html


-----------------------------------------------------------------------------------
Lab 13: Build Scripts, building for deployment
-----------------------------------------------------------------------------------

Update the file scripts/hooks/after-build.js

'use strict';
const fs = require('fs');
const archiver = require('archiver');
module.exports = function (configObj) {
  return new Promise((resolve, reject) => {
   console.log("Running after_build hook.");

    //change the extension of the my-archive.xxx file from .war to .zip as needed
    const output = fs.createWriteStream('my-archive.war');
    //leave unchanged, compression is the same for WAR or Zip file
    const archive = archiver('zip');

    output.on('close', () => {
      console.log('Files were successfully archived.');
      resolve();
    });

    archive.on('warning', (error) => {
      console.warn(error);
    });

    archive.on('error', (error) => {
      reject(error);
    });

    archive.pipe(output);
    archive.directory('web', false);
    archive.finalize();
  });
};

Issue the following command to build for release:
ojet build web --release